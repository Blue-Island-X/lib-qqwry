#!/usr/bin/env node

const program = require('commander');
const toRegex = require('to-regex');
const qqwry = require('..');
const getFomatFn = require('../lib/format')

program
	.name('find')
	.usage('<keyword> [keywords...]')
	.description('搜索区域信息')
	.option('-c, --count', '只是统计记录数')
	// .option('-f, --format <value>', '让IP段模式输出的特定格式 支持 "json" or "csv"', /^(json|csv)$/)
	.option('-i, --ignore-case', '不区分大小写模式')
	.option('-E, --extended-regexp', '启用正则表达式查询')
	.parse(process.argv);

if (program.args.length < 1) {
	program.help();
} else if (program.args.length) {
	try {
		let lib = qqwry();
		let { ignoreCase, count, format, extendedRegexp } = program.opts();
		let keyword = program.args;
		let stdout = process.stdout;
		lib.speed();
		let sum = 0;
		let formatFn = getFomatFn('text');
		let isMatch = (function(){
			let reg;
			if(extendedRegexp){
				reg = toRegex(keyword,{contains: true, nocase: ignoreCase});
			}else{
				// reg = mm.makeRe(keyword[0],{matchBase: false,nocase: ignoreCase})
				// reg = new RegExp(keyword[0], ignoreCase ? 'i' : '');
				let _isMatch;
				if(ignoreCase){
					keyword = keyword.map(v=>v.toLocaleLowerCase());
					_isMatch = function(str,key){
						return ~str.toLocaleLowerCase().indexOf(key);
					}
				}else{
					_isMatch = function(str,key){
						return str.indexOf(key) != -1;
					}
				}
				return (str)=>{
					for(let key of keyword){
						if(_isMatch(str,key)) return true;
					}
				}
			}
			return (str)=>{
				return reg.test(str);
			}
		}());
		// mm.isMatch

		lib.searchIPScopeStream(0, '255.255.255.255', { format: 'object' })
			.on('data', function(obj) {
				// let reg = new RegExp(extendedRegexp?keyword:keyword.repeat(/[\.\{\*]/g,), ignoreCase ? 'i' : '');
				// for(let key of keys){
				// if(~obj[4].indexOf(key) || ~obj[5].indexOf(key)){
				// if (isMatch(obj.slice(4).join(' '))) {
				if (isMatch(obj[4]) || isMatch(obj[5])) {
					sum++;
					// count || stdout.write(obj.slice(2, 4).join(' - ') + '  ' + obj.slice(4).join(' ') + '\n');
					if(!count){

					}stdout.write(formatFn(obj));
					return;
				}
				// }
				// stdout.write('')
			})
			.on('end', function() {
				count && console.log(sum);
			});
	} catch (err) {
		console.error(err.message || err);
	}
}
